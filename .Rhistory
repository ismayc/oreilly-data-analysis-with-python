populations_plus['continent_upper'] = populations['continent'].map(str.upper)
populations_plus.head()
# Chunk 46
# Filter rows for the years 2015 and 2020
populations_focused = populations[populations['year'].isin([2015, 2020])].copy()
# Calculate percentage change in population size across columns for 2015 to 2020
pop_size_pct_change = populations_focused.groupby('country_code')['size'].apply(lambda x: x.pct_change())
# Reset the index of the result to align it with the original DataFrame
pop_size_pct_change = pop_size_pct_change.reset_index(level=0, drop=True)
# Assign the calculated percentage change back to the DataFrame
populations_focused['size_change'] = pop_size_pct_change
populations_focused.head()
# Chunk 47
# Calculate the median fertility rate and life expectancy for each continent
median_values = populations.groupby('continent').agg({
'fertility_rate': 'median',
'life_expectancy': 'median'
})
median_values
# Chunk 48
# Create a pivot table of fertility rate and life expectancy by continent and year
pivot_table = pd.pivot_table(
populations,
values=['fertility_rate', 'life_expectancy'],
index=['continent'],
columns=['year'],
aggfunc='mean'
)
pivot_table
# Chunk 49
# Create a cross-tabulation of continent and year.
cross_tab = pd.crosstab(populations['continent'], populations['year'])
cross_tab
# Chunk 50
# Count the occurrences of each region
region_counts = populations['region'].value_counts()
region_counts
# Chunk 51
# Filter data for a specific country
afg_data = economies[economies['code'] == 'AFG']
# Line plot of gdp_percapita over the years
plt.figure(figsize=(10, 6))
plt.plot(afg_data['year'], afg_data['gdp_percapita'], marker='o', linestyle='-', color='b')
plt.show()
# Chunk 52
# Filter data for Caribbean countries and the year 2020
caribbean_countries = ['ABW', 'BHS', 'BRB', 'DOM']
data_2020_caribbean = economies[(economies['year'] == 2020) & (economies['code'].isin(caribbean_countries))]
# Bar chart of gdp_percapita for different Caribbean countries in 2020
plt.figure(figsize=(10, 6))
plt.bar(data_2020_caribbean['code'], data_2020_caribbean['gdp_percapita'], color='g')
plt.xticks(rotation=45)
plt.show()
# Chunk 53
# Filter data for a specific country
liberia_data = economies[economies['code'] == 'LBR']
# Line plot of gdp_percapita over the years with labels and titles
plt.figure(figsize=(10, 6))
plt.plot(liberia_data['year'], liberia_data['gdp_percapita'], marker='o', linestyle='-', color='r')
plt.xlabel('Year')
plt.ylabel('GDP Per Capita')
plt.title('GDP Per Capita Over Years for Liberia (LBR)')
plt.grid(True)
plt.show()
# Chunk 54
# Bar chart of gdp_percapita for different Caribbean countries in 2020 with
# adjusted axes and tick marks
plt.figure(figsize=(10, 6))
plt.bar(data_2020_caribbean['code'], data_2020_caribbean['gdp_percapita'], color='purple')
plt.xlabel('Country Code')
plt.ylabel('GDP Per Capita')
plt.title('GDP Per Capita for Different Countries in 2020')
# Adjust axes
plt.ylim(0, max(data_2020_caribbean['gdp_percapita']) + 5000)
# Adjust tick marks
plt.xticks(rotation=45)
plt.yticks(range(0, int(max(data_2020_caribbean['gdp_percapita']) + 5000), 5000))
plt.grid(axis='y')
plt.show()
# Chunk 55
import matplotlib.pyplot as plt
# Filter data for India
india_data = populations[populations['country_code'] == 'IND']
# Line plot of fertility rate over the years
plt.figure(figsize=(10, 6))
plt.plot(india_data['year'], india_data['fertility_rate'], marker='o', linestyle='-', color='b')
plt.show()
# Chunk 56
# Filter data for selected Asian countries and the year 2020
asian_countries = ['CHN', 'IND', 'IDN', 'PAK', 'BGD']
data_2020_asia = populations[(populations['year'] == 2020) & (populations['country_code'].isin(asian_countries))]
# Bar chart of population size for selected Asian countries in 2020
plt.figure(figsize=(10, 6))
plt.bar(data_2020_asia['country_code'], data_2020_asia['size'], color='g')
plt.show()
# Chunk 57
# Filter data for Nigeria
nigeria_data = populations[populations['country_code'] == 'NGA']
# Line plot of life expectancy over the years with labels and titles
plt.figure(figsize=(10, 6))
plt.plot(nigeria_data['year'], nigeria_data['life_expectancy'], marker='o', linestyle='-', color='r')
plt.xlabel('Year')
plt.ylabel('Life Expectancy')
plt.title('Life Expectancy Over Years for Nigeria (NGA)')
plt.grid(True)
plt.show()
# Filter data for selected African countries and the year 2020
african_countries = ['NGA', 'ETH', 'EGY', 'ZAF', 'DZA']
data_2020_africa = populations[(populations['year'] == 2020) & (populations['country_code'].isin(african_countries))]
# Bar chart of fertility rate for selected African countries in 2020 with adjusted axes and tick marks
plt.figure(figsize=(10, 6))
plt.bar(data_2020_africa['country_code'], data_2020_africa['fertility_rate'], color='purple')
plt.xlabel('Country Code')
plt.ylabel('Fertility Rate')
plt.title('Fertility Rate for Selected African Countries in 2020')
# Adjust axes
plt.ylim(0, max(data_2020_africa['fertility_rate']) + 1)
# Adjust tick marks
plt.xticks(rotation=45)
plt.yticks(range(0, int(max(data_2020_africa['fertility_rate']) + 1), 1))
plt.grid(axis='y')
plt.show()
populations.info()
populations
# Load the populations data from an Excel file
populations = pd.read_excel("populations.xlsx")
# Inspection methods for populations DataFrame
populations.head()
populations.info()
populations.describe()
# Checking for missing data and data types for populations DataFrame
populations.isnull().sum()
populations.dtypes
# Chunk 1
#| include: false
import pandas as pd
# Display all columns
pd.set_option('display.max_columns', None)
# Chunk 2
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
# Chunk 3
# Load the data from a CSV file
economies = pd.read_csv("economies.csv")
# Load the data from an Excel file
economies = pd.read_excel("economies.xlsx")
# Chunk 4
# Display the first few rows of the DataFrame
economies.head()
# Chunk 5
# Display the information about the DataFrame
economies.info()
# Chunk 6
# Display summary statistics of the DataFrame
economies.describe()
# Chunk 7
# Check for missing data
economies.isnull().sum()
# Chunk 8
# Check data types
economies.dtypes
# Chunk 9
# Load the populations data from an Excel file
# Inspection methods for populations DataFrame
# Checking for missing data and data types for populations DataFrame
# Chunk 10
# Load the populations data from an Excel file
populations = pd.read_excel("populations.xlsx")
# Inspection methods for populations DataFrame
populations.head()
populations.info()
populations.describe()
# Checking for missing data and data types for populations DataFrame
populations.isnull().sum()
populations.dtypes
# Chunk 11
# Remove rows with any missing values
economies_cleaned_any = economies.dropna(how='any')
economies_cleaned_any
# Chunk 12
# Remove rows only if all values are missing
economies_cleaned_all = economies.dropna(how='all')
economies_cleaned_all
# Chunk 13
# Remove rows with missing values in specific columns
economies_cleaned_subset = economies.dropna(subset=['exports', 'imports'])
economies_cleaned_subset
# Chunk 14
# Remove columns with any missing values
economies_no_missing_columns = economies.dropna(axis=1)
# Display the DataFrame after removing columns with missing values
economies_no_missing_columns.head()
# Chunk 15
# Replace missing values with a specific value (e.g., 0 for numerical columns, 'Unknown' for categorical columns)
economies_fill_value = economies.fillna({
'gdp_percapita': 0,
'gross_savings': 0,
'inflation_rate': 0,
'total_investment': 0,
'unemployment_rate': 0,
'exports': 0,
'imports': 0,
'income_group': 'Unknown'
})
# Display the DataFrame after replacing missing values with specific values
economies_fill_value.head()
# Chunk 16
# Change year to be a string instead of an integer
economies_char_year = economies.astype({'year': 'str'})
# Display the information on the DataFrame with year as a string
economies_char_year.info()
# Chunk 17
# Change the year of string type back to integer
economies_int_year = economies_char_year.astype({'year': 'int'})
# Display the information on the DataFrame with year as a string
economies_int_year.info()
# Chunk 18
# Rename the 'income_group' column to 'income_category'
economies_renamed = economies.rename(columns={'income_group': 'income_category'})
economies_renamed.head()
# Chunk 19
# Set unique combinations of 'code' and 'year' as the index
economies_indexed = economies.set_index(['code', 'year'])
economies_indexed.head()
# Chunk 20
# Reset the index
economies_reset = economies_indexed.reset_index()
economies_reset.head()
# Chunk 21
# Filter rows where 'gdp_percapita' is greater than 20,000
economies_high_gdp = economies[economies['gdp_percapita'] > 20000]
economies_high_gdp.head()
# Chunk 22
# Filter rows where 'income_group' is 'High income'
economies_high_income = economies[economies['income_group'] == 'High income']
economies_high_income.head()
# Chunk 23
# Filter rows where total_investment is not NaN
non_null_investment = economies[economies['total_investment'].notna()]
non_null_investment.head()
# Chunk 24
# Filter rows where inflation_rate is less than 0 and income_group is 'Low income'
deflation_low_income = economies[(economies['inflation_rate'] < 0) & (economies['income_group'] == 'Low income')]
deflation_low_income.head()
# Chunk 25
# Filter rows where gdp_percapita is greater than 40,000 and year is less than or equal to 2016
top_gdp_2010_2015 = economies[(economies['gdp_percapita'] > 40000) & (economies['year'] <= 2015)]
top_gdp_2010_2015.head()
# Chunk 26
# Remove rows with any missing values
populations_cleaned_any = populations.dropna(how='any')
populations_cleaned_any
# Chunk 27
# Remove rows only if all values are missing
populations_cleaned_all = populations.dropna(how='all')
populations_cleaned_all
# Chunk 28
# Remove rows with missing values in specific columns
populations_cleaned_subset = populations.dropna(subset=['fertility_rate', 'life_expectancy'])
populations_cleaned_subset
# Chunk 29
# Remove columns with any missing values
populations_no_missing_columns = populations.dropna(axis=1)
populations_no_missing_columns.head()
# Chunk 30
# Replace missing values with a specific value (e.g., 0 for numerical columns,
# 'Unknown' for categorical columns)
populations_fill_value = populations.fillna({
'fertility_rate': 0,
'life_expectancy': 0,
'size': 0,
'continent': 'Unknown',
'region': 'Unknown'
})
populations_fill_value.head()
# Chunk 31
# Convert the 'year' column to string type
populations['year'] = populations['year'].astype(str)
populations.dtypes
# Chunk 32
# Rename the 'fertility_rate' column to 'fertility'
populations_renamed = populations.rename(columns={'fertility_rate': 'fertility'})
populations_renamed.head()
# Chunk 33
# Set the 'country_code' column as the index
populations_indexed = populations.set_index('country_code')
populations_indexed.head()
# Chunk 34
# Filter the DataFrame to include only rows where the 'continent' is 'Asia'
populations_asia = populations[populations['continent'] == 'Asia']
populations_asia.head()
# Chunk 35
# Filter the DataFrame to include only rows where the 'year' is 2020
populations_2020 = populations[populations['year'] == '2020']
populations_2020.head()
# Chunk 36
# Filter the DataFrame to include only rows where the 'fertility_rate' is greater than 2
populations_high_fertility = populations[populations['fertility_rate'] > 2]
populations_high_fertility.head()
# Chunk 37
grouped_data = economies.groupby('income_group')['gdp_percapita'].mean()
grouped_data
# Chunk 38
# Convert income_group to uppercase using map()
economies_plus = economies.copy()
economies_plus['income_group_upper'] = economies['income_group'].map(str.upper)
economies_plus.head()
# Chunk 39
# Calculate percentage change in gdp_percapita across rows for 2015 to 2020
# Filter rows for the years 2015 and 2020
economies_focused = economies[economies['year'].isin([2015, 2020])].copy()
# Calculate percentage change in gdp_percapita across columns for 2015 to 2020
gdp_pct_change = economies_focused.groupby('code')['gdp_percapita'].apply(lambda x: x.pct_change())
# Reset the index of the result to align it with the original DataFrame
gdp_pct_change = gdp_pct_change.reset_index(level=0, drop=True)
# Assign the calculated percentage change back to the DataFrame
economies_focused['gdp_percapita_change'] = gdp_pct_change
# Chunk 40
# Calculate the median gdp_percapita and inflation_rate for each income_group
median_values = economies.groupby('income_group').agg({
'gdp_percapita': 'median',
'inflation_rate': 'median'
})
median_values
# Chunk 41
# Create a pivot table of gdp_percapita and inflation_rate by income_group and year
pivot_table = pd.pivot_table(
economies,
values=['gdp_percapita', 'inflation_rate'],
index=['income_group'],
columns=['year'],
aggfunc='mean'
)
pivot_table
# Chunk 42
cross_tab = pd.crosstab(economies['income_group'], economies['year'])
cross_tab
# Chunk 43
# Count the occurrences of each income_group
income_group_counts = economies['income_group'].value_counts()
income_group_counts
# Chunk 44
# Group data by continent and calculate the mean life expectancy
grouped_data = populations.groupby('continent')['life_expectancy'].mean()
grouped_data
# Chunk 45
# Convert continent to uppercase using map()
populations_plus = populations.copy()
populations_plus['continent_upper'] = populations['continent'].map(str.upper)
populations_plus.head()
# Chunk 46
# Filter rows for the years 2015 and 2020
populations_focused = populations[populations['year'].isin([2015, 2020])].copy()
# Calculate percentage change in population size across columns for 2015 to 2020
pop_size_pct_change = populations_focused.groupby('country_code')['size'].apply(lambda x: x.pct_change())
# Reset the index of the result to align it with the original DataFrame
pop_size_pct_change = pop_size_pct_change.reset_index(level=0, drop=True)
# Assign the calculated percentage change back to the DataFrame
populations_focused['size_change'] = pop_size_pct_change
populations_focused.head()
# Chunk 47
# Calculate the median fertility rate and life expectancy for each continent
median_values = populations.groupby('continent').agg({
'fertility_rate': 'median',
'life_expectancy': 'median'
})
median_values
# Chunk 48
# Create a pivot table of fertility rate and life expectancy by continent and year
pivot_table = pd.pivot_table(
populations,
values=['fertility_rate', 'life_expectancy'],
index=['continent'],
columns=['year'],
aggfunc='mean'
)
pivot_table
# Chunk 49
# Create a cross-tabulation of continent and year.
cross_tab = pd.crosstab(populations['continent'], populations['year'])
cross_tab
# Chunk 50
# Count the occurrences of each region
region_counts = populations['region'].value_counts()
region_counts
# Chunk 51
# Filter data for a specific country
afg_data = economies[economies['code'] == 'AFG']
# Line plot of gdp_percapita over the years
plt.figure(figsize=(10, 6))
plt.plot(afg_data['year'], afg_data['gdp_percapita'], marker='o', linestyle='-', color='b')
plt.show()
# Chunk 52
# Filter data for Caribbean countries and the year 2020
caribbean_countries = ['ABW', 'BHS', 'BRB', 'DOM']
data_2020_caribbean = economies[(economies['year'] == 2020) & (economies['code'].isin(caribbean_countries))]
# Bar chart of gdp_percapita for different Caribbean countries in 2020
plt.figure(figsize=(10, 6))
plt.bar(data_2020_caribbean['code'], data_2020_caribbean['gdp_percapita'], color='g')
plt.xticks(rotation=45)
plt.show()
# Chunk 53
# Filter data for a specific country
liberia_data = economies[economies['code'] == 'LBR']
# Line plot of gdp_percapita over the years with labels and titles
plt.figure(figsize=(10, 6))
plt.plot(liberia_data['year'], liberia_data['gdp_percapita'], marker='o', linestyle='-', color='r')
plt.xlabel('Year')
plt.ylabel('GDP Per Capita')
plt.title('GDP Per Capita Over Years for Liberia (LBR)')
plt.grid(True)
plt.show()
# Chunk 54
# Bar chart of gdp_percapita for different Caribbean countries in 2020 with
# adjusted axes and tick marks
plt.figure(figsize=(10, 6))
plt.bar(data_2020_caribbean['code'], data_2020_caribbean['gdp_percapita'], color='purple')
plt.xlabel('Country Code')
plt.ylabel('GDP Per Capita')
plt.title('GDP Per Capita for Different Countries in 2020')
# Adjust axes
plt.ylim(0, max(data_2020_caribbean['gdp_percapita']) + 5000)
# Adjust tick marks
plt.xticks(rotation=45)
plt.yticks(range(0, int(max(data_2020_caribbean['gdp_percapita']) + 5000), 5000))
plt.grid(axis='y')
plt.show()
# Chunk 55
import matplotlib.pyplot as plt
# Filter data for India
india_data = populations[populations['country_code'] == 'IND']
# Line plot of fertility rate over the years
plt.figure(figsize=(10, 6))
plt.plot(india_data['year'], india_data['fertility_rate'], marker='o', linestyle='-', color='b')
plt.show()
# Chunk 56
# Filter data for selected Asian countries and the year 2020
asian_countries = ['CHN', 'IND', 'IDN', 'PAK', 'BGD']
data_2020_asia = populations[(populations['year'] == 2020) & (populations['country_code'].isin(asian_countries))]
# Bar chart of population size for selected Asian countries in 2020
plt.figure(figsize=(10, 6))
plt.bar(data_2020_asia['country_code'], data_2020_asia['size'], color='g')
plt.show()
# Chunk 57
# Filter data for Nigeria
nigeria_data = populations[populations['country_code'] == 'NGA']
# Line plot of life expectancy over the years with labels and titles
plt.figure(figsize=(10, 6))
plt.plot(nigeria_data['year'], nigeria_data['life_expectancy'], marker='o', linestyle='-', color='r')
plt.xlabel('Year')
plt.ylabel('Life Expectancy')
plt.title('Life Expectancy Over Years for Nigeria (NGA)')
plt.grid(True)
plt.show()
data_2020_africa.info()
# Filter data for selected African countries and the year 2020
african_countries = ['NGA', 'ETH', 'EGY', 'ZAF', 'DZA']
data_2020_africa = populations[(populations['year'] == 2020) & (populations['country_code'].isin(african_countries))]
data_2020_africa['year'] = data_2020_africa['year'].astype(int)
# Bar chart of fertility rate for selected African countries in 2020 with adjusted axes and tick marks
plt.figure(figsize=(10, 6))
plt.bar(data_2020_africa['country_code'], data_2020_africa['fertility_rate'], color='purple')
plt.xlabel('Country Code')
plt.ylabel('Fertility Rate')
plt.title('Fertility Rate for Selected African Countries in 2020')
# Adjust axes
plt.ylim(0, max(data_2020_africa['fertility_rate']) + 1)
# Adjust tick marks
plt.xticks(rotation=45)
plt.yticks(range(0, int(max(data_2020_africa['fertility_rate']) + 1), 1))
plt.grid(axis='y')
plt.show()
data_2020_africa.info()
african_countries = ['NGA', 'ETH', 'EGY', 'ZAF', 'DZA']
data_2020_africa = populations[(populations['year'] == 2020) & (populations['country_code'].isin(african_countries))]
african_countries = ['NGA', 'ETH', 'EGY', 'ZAF', 'DZA']
populations[(populations['year'] == 2020)
]
# Filter data for selected African countries and the year 2020
african_countries = ['NGA', 'ETH', 'EGY', 'ZAF', 'DZA']
# Need to convert year back to an integer?
populations['year'] = populations['year'].astype(int)
data_2020_africa = populations[(populations['year'] == 2020) & (populations['country_code'].isin(african_countries))]
# Bar chart of fertility rate for selected African countries in 2020 with adjusted axes and tick marks
plt.figure(figsize=(10, 6))
plt.bar(data_2020_africa['country_code'], data_2020_africa['fertility_rate'], color='purple')
plt.xlabel('Country Code')
plt.ylabel('Fertility Rate')
plt.title('Fertility Rate for Selected African Countries in 2020')
# Adjust axes
plt.ylim(0, max(data_2020_africa['fertility_rate']) + 1)
# Adjust tick marks
plt.xticks(rotation=45)
plt.yticks(range(0, int(max(data_2020_africa['fertility_rate']) + 1), 1))
plt.grid(axis='y')
plt.show()
renv::snapshot()
renv::status()
renv::repair()
reticulate::repl_python()
# Handle missing values
economies_cleaned = economies.fillna({
'gdp_percapita': economies['gdp_percapita'].mean(),
reticulate::repl_python()
# Bar chart of GDP per Capita by Country and Income Group
bar_fig = px.bar(selected_data, x='code', y='gdp_percapita', color='income_group',
title='GDP Per Capita by Country and Income Group (2020)',
labels={'gdp_percapita': 'GDP Per Capita', 'code': 'Country Code'})
import plotly.express as px
reticulate::repl_python()
